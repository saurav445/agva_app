class SocketService {
  // ... existing code ...

  void initializeSocket(String serverUrl) {
    socket = io.io(serverUrl, <String, dynamic>{
      'transports': ['websocket'],
      'autoConnect': true,
    });

    socket.on('connect', (_) {
      print('Connected to the server');
      socket.emit('FlutterConnected', {'message': 'Flutter client connected'});
    });

    // Add event listeners for data events
    socket.on('DataReceivingReact', (data) {
      // Handle data received from the server
      print('Received data from the server: $data');
      // Update your UI with the received data
      // Example: updateStateWithData(data);
    });

    // ... other event listeners ...
  }
}


class _DeviceDetailsState extends State<DeviceDetails> {
  late String receivedData = ''; // Update this variable with the received data

  // ... existing code ...

  @override
  void initState() {
    super.initState();
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
      DeviceOrientation.landscapeRight,
      DeviceOrientation.landscapeLeft,
    ]);
    SocketService().initializeSocket('http://192.168.2.1:8000');
  }

  // ... existing code ...

  @override
  Widget build(BuildContext context) {
    // ... existing code ...

    // Example: Display received data in a Text widget
    Text(receivedData),

    // ... existing code ...
  }
}

// Inside your Socket.IO logic in the backend
socket.emit('DataReceivingReact', { /* Your data here */ });

    // socket.on('FlutterConnected', (data) {
    //   var value = data.split("^")[0];
    //   if (value == deviceId) {
    //     const modeData = data.split("^")[1];
    //     const observedData = data.split("^")[2].split(",");
    //     const setParameter = data.split("^")[3].split(",");
    //     const secondaryObserved = data.split("^")[4].split(",");
    //     const spo2List = data.split("^")[5].split(",");
    //     const alertData = data.split("^")[6];
    //     const batteryAlarmData = data.split("^")[7];
    //   }
    //   print('Server acknowledges Flutter client connection: $data');
    // });


    class SocketService {
  static final SocketService _instance = SocketService._internal();

  factory SocketService() {
    return _instance;
  }

  SocketService._internal();
  late String deviceId;
  late io.Socket socket;

  void initializeSocket(String serverUrl, String deviceId) {
    this.deviceId = deviceId;

    socket = io.io(serverUrl, <String, dynamic>{
      'transports': ['websocket'],
      'autoConnect': true,
    });

    socket.on('connect', (_) {
      print('Connected to the server');
      socket.emit('ReactStartUp', this.deviceId);
    });

    socket.on('disconnect', (_) {
      print('Disconnected from the server');
    });
  }
}

// ...

class _DeviceDetailsState extends State<DeviceDetails> {
  // ...

  @override
  void initState() {
    super.initState();
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
      DeviceOrientation.landscapeRight,
      DeviceOrientation.landscapeLeft,
    ]);
    
    // Pass the device ID to initializeSocket
    SocketService().initializeSocket('http://192.168.2.1:8000', widget.deviceId);
  }

  // ...
}
